'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _require = require('./internal/utils'),
    isDate = _require.isDate;

var CalDate = require('caldate');

var CalEvent = function () {
  function CalEvent(opts) {
    _classCallCheck(this, CalEvent);

    opts = opts || {};
    this.substitute = opts.substitute;
    this.opts = opts;
    this.offset = opts.offset;
    this.dates = [];
    if (isDate(opts)) {
      this.opts = new CalDate(opts);
    }
  }

  CalEvent.prototype.inYear = function inYear(year) {
    var d = new CalDate(this.opts).setOffset(this.offset);
    if (!(d.year && d.year !== year)) {
      d.year = year;
      this.dates.push(d);
    }
    return this;
  };

  CalEvent.prototype.reset = function reset() {
    this.dates = [];
  };

  CalEvent.prototype.isEqualDate = function isEqualDate(calEvent) {
    var res = false;
    for (var _iterator = this.dates, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var thisDate = _ref;

      for (var _iterator2 = calEvent.dates, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
        var _ref2;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref2 = _i2.value;
        }

        var date = _ref2;

        res |= thisDate.isEqualDate(date);
      }
    }
    return !!res;
  };

  /**
   * @param {Number} year - year to filter
   * @param {Object[]} active - definition of active ranges `{from: {Date}, [to]: {Date}}`
   * @return {this} for chaining
   */


  CalEvent.prototype.filter = function filter(year, active) {
    function isActive(date) {
      if (!active) {
        if (date.year === year) {
          return true;
        } else {
          return false;
        }
      }
      var _date = date.toDate();
      for (var _iterator3 = active, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
        var _ref3;

        if (_isArray3) {
          if (_i3 >= _iterator3.length) break;
          _ref3 = _iterator3[_i3++];
        } else {
          _i3 = _iterator3.next();
          if (_i3.done) break;
          _ref3 = _i3.value;
        }

        var a = _ref3;
        var from = a.from,
            to = a.to;

        if (date.year === year && (from && to && from <= _date && to > _date || from && !to && from <= _date || !from && to && to > _date)) {
          return true;
        }
      }
    }

    this.dates = this.dates.filter(function (date) {
      if (!date._filter && isActive(date)) {
        return date;
      }
    });

    return this;
  };

  CalEvent.prototype.push = function push(calEvent) {
    if (calEvent && Array.isArray(calEvent.dates)) {
      this.dates = this.dates.concat(calEvent.dates);
    }
  };

  CalEvent.prototype.get = function get(timezone) {
    var _this = this;

    var arr = this.dates.map(function (date) {
      var o = {
        date: date.toString(),
        start: date.toTimezone(timezone),
        end: date.toEndDate().toTimezone(timezone)
      };
      _this._addSubstitute(date, o);
      return o;
    });
    return arr;
  };

  CalEvent.prototype._addSubstitute = function _addSubstitute(date, obj) {
    if (this.substitute || date.substitute) obj.substitute = true;
  };

  return CalEvent;
}();

module.exports = CalEvent;